import com.envelopes.product.*;

String module = "taxShop.groovy";

Map<String, Object> productMap = new HashMap<>();
List<Product> customPrintedFolders = new ArrayList<>();

productMap.put("product", new Product(delegator, dispatcher, "912-501-C", request));
productMap.put("productType", "standard");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "08-96-501-C", request));
productMap.put("productType", "quickShip1");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "08-96-FOIL-501-C", request));
productMap.put("productType", "quickShip2");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "CST-0836", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-102", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "STF-0816", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SPDAT-FD-06521", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SPDAT-FD-04515", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SPDAT-FD-06684", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "FT-0821", request));
productMap.put("productType", "product");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "ACCO-SAPF", request));
productMap.put("productType", "blankProduct");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "TPPF-S", request));
productMap.put("productType", "blankProduct");
customPrintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "2SAFPL", request));
productMap.put("productType", "blankProduct");
customPrintedFolders.add(productMap);
context.customPrintedFolders = customPrintedFolders;

List<Product> blankAndPreprintedFolders = new ArrayList<>();
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "TAX-912-NRTL", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "TAX-912-FL", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "TAX-912-NF80", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "TAX-912-CEI80", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-101-546-TAX", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-101-DB100", request));
productMap.put("productType", "blankProduct");
productMap.put("productLink", "product/~category_id=BLANK_ST_PR_FOLDERS/~product_id=");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-101-CSG100", request));
productMap.put("productType", "blankProduct");
productMap.put("productLink", "product/~category_id=BLANK_ST_PR_FOLDERS/~product_id=");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "PF-DBLI", request));
productMap.put("productType", "blankProduct");
productMap.put("productLink", "product/~category_id=BLANK_ST_PR_FOLDERS/~product_id=");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-101-DDP100", request));
productMap.put("productType", "blankProduct");
productMap.put("productLink", "product/~category_id=BLANK_ST_PR_FOLDERS/~product_id=");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "PF-WLI", request));
productMap.put("productType", "blankProduct");
productMap.put("productLink", "product/~category_id=BLANK_ST_PR_FOLDERS/~product_id=");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "PF-BLI", request));
productMap.put("productType", "blankProduct");
productMap.put("productLink", "product/~category_id=BLANK_ST_PR_FOLDERS/~product_id=");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-101-546-TANG", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "OR-144-DDBLU100", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "OR-144-DDBLK100", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "OR-145-DDBLU100", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "OR-145-CSG100", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "OR-145-DDBLK100", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "SF-102-DDBLU100", request));
productMap.put("productType", "blankProduct");
blankAndPreprintedFolders.add(productMap);
context.blankAndPreprintedFolders = blankAndPreprintedFolders;

List<Product> reportCovers = new ArrayList<>();
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCSTW-191", request));
productMap.put("productType", "product");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCST-193", request));
productMap.put("productType", "product");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCW-0909", request));
productMap.put("productType", "product");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCFT-0922", request));
productMap.put("productType", "product");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCFT-0923", request));
productMap.put("productType", "product");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCSTW-198", request));
productMap.put("productType", "covers");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCST-197", request));
productMap.put("productType", "covers");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCW-7509", request));
productMap.put("productType", "covers");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RCW-192", request));
productMap.put("productType", "covers");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RC-7501", request));
productMap.put("productType", "covers");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RC-190", request));
productMap.put("productType", "covers");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RC81211-GN", request));
productMap.put("productType", "blankProduct");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RC81211-BL", request));
productMap.put("productType", "blankProduct");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RC81211-BASST", request));
productMap.put("productType", "blankProduct");
reportCovers.add(productMap);
productMap = new HashMap<>();
productMap.put("product", new Product(delegator, dispatcher, "RC81211-BK", request));
productMap.put("productType", "blankProduct");
reportCovers.add(productMap);
context.reportCovers = reportCovers;