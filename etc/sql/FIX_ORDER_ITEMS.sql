DROP PROCEDURE IF EXISTS convert_data;

DELIMITER //
CREATE PROCEDURE convert_data()
BEGIN
	DECLARE bDone INT;
	DECLARE OID VARCHAR(20);
	DECLARE OISID VARCHAR(20);
	DECLARE IDESC VARCHAR(255);
	DECLARE i INT DEFAULT 0;
	DECLARE ctr INT DEFAULT 0;
	DECLARE str_len INT;
	DECLARE temp_str VARCHAR(200) DEFAULT '';
	DECLARE qty_str VARCHAR(200) DEFAULT '';

	DECLARE curs CURSOR FOR SELECT order_id, order_item_seq_id, ITEM_DESCRIPTION FROM order_item WHERE product_id = 'SAMPLE';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;

	DROP TABLE IF EXISTS order_item_samples;
	CREATE TABLE order_item_samples LIKE order_item;

	SET AUTOCOMMIT=0;
	SET UNIQUE_CHECKS=0;
	SET FOREIGN_KEY_CHECKS=0;

	OPEN curs;

	SET bDone = 0;
	REPEAT
	FETCH curs INTO OID, OISID, IDESC;
		IF bDone = 0 THEN
			SET ctr = 0;
			SET str_len=LENGTH(IDESC);
			SET i = (LENGTH(IDESC)-LENGTH(REPLACE(IDESC, ';', '')))/LENGTH(';');
			WHILE(ctr<i) DO
				SET ctr=ctr+1;
				SET temp_str = REPLACE(SUBSTRING(SUBSTRING_INDEX(IDESC, ';', ctr), LENGTH(SUBSTRING_INDEX(IDESC, ';',ctr - 1)) + 1), ';', '');
				SET qty_str = SUBSTRING(temp_str,instr(temp_str,"(") + 1, instr(temp_str,")")-instr(temp_str,"(")-1);
				SET temp_str = REPLACE(temp_str, concat('(',qty_str,')'),'');

				INSERT INTO `order_item_samples`
				(`ORDER_ID`,					`ORDER_ITEM_SEQ_ID`,		`ORDER_ITEM_TYPE_ID`,		`BUDGET_ID`,
				`BUDGET_ITEM_SEQ_ID`,			`PRODUCT_ID`,				`PRODUCT_FEATURE_ID`,		`PROD_CATALOG_ID`,
				`PRODUCT_CATEGORY_ID`,			`QUOTE_ID`,					`QUOTE_ITEM_SEQ_ID`,		`SHOPPING_LIST_ID`,
				`SHOPPING_LIST_ITEM_SEQ_ID`,	`SUBSCRIPTION_ID`,			`DEPLOYMENT_ID`,			`QUANTITY`,
				`CUSTOM_QUANTITY`,				`CANCEL_QUANTITY`,			`SELECTED_AMOUNT`,			`UNIT_PRICE`,
				`UNIT_LIST_PRICE`,				`UNIT_AVERAGE_COST`,		`ITEM_DESCRIPTION`,			`COMMENTS`,
				`CORRESPONDING_PO_ID`,			`STATUS_ID`,				`SYNC_STATUS_ID`,			`ESTIMATED_SHIP_DATE`,
				`ESTIMATED_DELIVERY_DATE`,		`AUTO_CANCEL_DATE`,			`DONT_CANCEL_SET_DATE`,		`DONT_CANCEL_SET_USER_LOGIN`,
				`LAST_UPDATED_STAMP`,			`LAST_UPDATED_TX_STAMP`,	`CREATED_STAMP`,			`CREATED_TX_STAMP`,
				`EXTERNAL_ID`,					`ORDER_ITEM_GROUP_SEQ_ID`,	`IS_ITEM_GROUP_PRIMARY`,	`IS_PROMO`,
				`UNIT_RECURRING_PRICE`,			`IS_MODIFIED_PRICE`,		`RECURRING_FREQ_UOM_ID`,	`SHIP_BEFORE_DATE`,
				`SHIP_AFTER_DATE`,				`OVERRIDE_GL_ACCOUNT_ID`,	`IS_RUSH_PRODUCTION`,		`DUE_DATE`,
				`ARTWORK_SOURCE`,				`IS_REMOVE_FROM_SCHEDULE`,	`RESPONSE_STATUS_ID`)
				SELECT
				`ORDER_ID`,						CONCAT(`ORDER_ITEM_SEQ_ID`, ctr),		`ORDER_ITEM_TYPE_ID`,		`BUDGET_ID`,
				`BUDGET_ITEM_SEQ_ID`,			temp_str,					`PRODUCT_FEATURE_ID`,		`PROD_CATALOG_ID`,
				`PRODUCT_CATEGORY_ID`,			`QUOTE_ID`,					`QUOTE_ITEM_SEQ_ID`,		`SHOPPING_LIST_ID`,
				`SHOPPING_LIST_ITEM_SEQ_ID`,	`SUBSCRIPTION_ID`,			`DEPLOYMENT_ID`,			qty_str,
				`CUSTOM_QUANTITY`,				`CANCEL_QUANTITY`,			`SELECTED_AMOUNT`,			`UNIT_PRICE`,
				`UNIT_LIST_PRICE`,				`UNIT_AVERAGE_COST`,		`ITEM_DESCRIPTION`,			`COMMENTS`,
				`CORRESPONDING_PO_ID`,			`STATUS_ID`,				`SYNC_STATUS_ID`,			`ESTIMATED_SHIP_DATE`,
				`ESTIMATED_DELIVERY_DATE`,		`AUTO_CANCEL_DATE`,			`DONT_CANCEL_SET_DATE`,		`DONT_CANCEL_SET_USER_LOGIN`,
				`LAST_UPDATED_STAMP`,			`LAST_UPDATED_TX_STAMP`,	`CREATED_STAMP`,			`CREATED_TX_STAMP`,
				`EXTERNAL_ID`,					`ORDER_ITEM_GROUP_SEQ_ID`,	`IS_ITEM_GROUP_PRIMARY`,	`IS_PROMO`,
				`UNIT_RECURRING_PRICE`,			`IS_MODIFIED_PRICE`,		`RECURRING_FREQ_UOM_ID`,	`SHIP_BEFORE_DATE`,
				`SHIP_AFTER_DATE`,				`OVERRIDE_GL_ACCOUNT_ID`,	`IS_RUSH_PRODUCTION`,		`DUE_DATE`,
				`ARTWORK_SOURCE`,				`IS_REMOVE_FROM_SCHEDULE`,	`RESPONSE_STATUS_ID`
				FROM `order_item` WHERE  order_id = OID AND order_item_seq_id = OISID;

			END WHILE;

		END IF;
	UNTIL bDone END REPEAT;

	CLOSE curs;

	DROP TABLE IF EXISTS order_item_temp;
	CREATE TABLE order_item_temp LIKE order_item;
	INSERT INTO order_item_temp
	SELECT * FROM `order_item` where product_id != 'SAMPLE' ;
	INSERT INTO order_item_temp
	select * from `order_item_samples`;

	DROP TABLE IF EXISTS order_item;
	RENAME TABLE order_item_temp TO order_item;

	SET AUTOCOMMIT=1;
	SET UNIQUE_CHECKS=1;
	SET FOREIGN_KEY_CHECKS=1;
	commit;
END //
DELIMITER ;

CALL convert_data();

DROP PROCEDURE convert_data;

